<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_AC</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Code

image_speed = 0;

ACColour = "Yellow";
WarningRad = 88;
CollisionRad = 16;
isAtRisk = false;
isAtRisk2 = false;

MovDir = "None"; // Available vars: N, NW, W, SW, S, SE, E, NE, None
MOVEMENT_SPEED = 1;
REENTRY_TIMER = 5; // seconds to wait after AC has left room
NextGate = "1";

selector1 = instance_create(x,y,obj_DirSelector);
selector1.selectorID = 1;
selector1.ownerAC = self;
selector2 = instance_create(x,y,obj_DirSelector);
selector2.selectorID = 2;
selector2.ownerAC = self;
selector3 = instance_create(x,y,obj_DirSelector);
selector3.selectorID = 3;
selector3.ownerAC = self;
selector4 = instance_create(x,y,obj_DirSelector);
selector4.selectorID = 4;
selector4.ownerAC = self;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(selector1);
instance_destroy(selector2);
instance_destroy(selector3);
instance_destroy(selector4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Spawn location/position
randomize();
startSet = irandom(3.9); // 0=N,1=W,2=S,3=E

if(startSet == 0){
    MovDir="S";
    y = -64;
    x = irandom_range(120, room_width - 120);
} else if(startSet == 1){
    MovDir="E";
    y = irandom_range(120, room_height - 120);
    x = -64;
} else if(startSet == 2){
    MovDir="N";
    y = room_height + 64;
    x = irandom_range(120, room_width - 120);
} else if(startSet == 3){
    MovDir="W";
    y = irandom_range(120, room_height - 120);
    x = room_width + 64;
}

alarm[0] = -1; // stop countdown
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement Handler

switch (MovDir)
{
case "N":
    
    // Move AC
    y -= MOVEMENT_SPEED;
    
    // Update selectors
    selector1.image_angle = 90;
    selector1.x = x - 52; // 36 for 45deg
    selector1.y = y;
    selector1.MovDir = "W";
    
    selector2.image_angle = 45;
    selector2.x = x - 36; // 36 for 45deg
    selector2.y = y - 36;
    selector2.MovDir = "NW";
    
    selector3.image_angle = -45;
    selector3.x = x + 36; // 36 for 45deg
    selector3.y = y - 36;
    selector3.MovDir = "NE";
    
    selector4.image_angle = -90;
    selector4.x = x + 52; // 36 for 45deg
    selector4.y = y;
    selector4.MovDir = "E";
    
    break;
case "NW":
    
    // Move AC
    y -= MOVEMENT_SPEED*0.71;
    x -= MOVEMENT_SPEED*0.71;
    
    // Update selectors
    selector1.image_angle = 135;
    selector1.x = x - 36; // 36 for 45deg
    selector1.y = y + 36;
    selector1.MovDir = "SW";
    
    selector2.image_angle = 90;
    selector2.x = x - 52; // 36 for 45deg
    selector2.y = y;
    selector2.MovDir = "W";
    
    selector3.image_angle = 0;
    selector3.x = x; // 36 for 45deg
    selector3.y = y - 52;
    selector3.MovDir = "N";
    
    selector4.image_angle = -45;
    selector4.x = x + 36; // 36 for 45deg
    selector4.y = y - 36;
    selector4.MovDir = "NE";
    
    break;
case "W":
    
    // Move AC
    x -= MOVEMENT_SPEED;
    
    // Update selectors
    selector1.image_angle = 180;
    selector1.x = x; // 36 for 45deg
    selector1.y = y + 52;
    selector1.MovDir = "S";
    
    selector2.image_angle = 135;
    selector2.x = x - 36; // 36 for 45deg
    selector2.y = y + 36;
    selector2.MovDir = "SW";
    
    selector3.image_angle = 45;
    selector3.x = x - 36; // 36 for 45deg
    selector3.y = y - 36;
    selector3.MovDir = "NW";
    
    selector4.image_angle = 0;
    selector4.x = x; // 36 for 45deg
    selector4.y = y - 52;
    selector4.MovDir = "N";
    
    break;
case "SW":
    
    // Move AC
    y += MOVEMENT_SPEED*0.71;
    x -= MOVEMENT_SPEED*0.71;
    
    // Update selectors
    selector1.image_angle = -135;
    selector1.x = x + 36; // 36 for 45deg
    selector1.y = y + 36;
    selector1.MovDir = "SE";
    
    selector2.image_angle = 180;
    selector2.x = x; // 36 for 45deg
    selector2.y = y + 52;
    selector2.MovDir = "S";
    
    selector3.image_angle = 90;
    selector3.x = x - 52; // 36 for 45deg
    selector3.y = y;
    selector3.MovDir = "W";
    
    selector4.image_angle = 45;
    selector4.x = x - 36; // 36 for 45deg
    selector4.y = y - 36;
    selector4.MovDir = "NW";
    
    break;
case "S":
    
    // Move AC
    y += MOVEMENT_SPEED;
    
    // Update selectors
    selector1.image_angle = -90;
    selector1.x = x + 52; // 36 for 45deg
    selector1.y = y;
    selector1.MovDir = "E";
    
    selector2.image_angle = -135;
    selector2.x = x + 36; // 36 for 45deg
    selector2.y = y + 36;
    selector2.MovDir = "SE";
    
    selector3.image_angle = 135;
    selector3.x = x - 36; // 36 for 45deg
    selector3.y = y + 36;
    selector3.MovDir = "SW";
    
    selector4.image_angle = 90;
    selector4.x = x - 52; // 36 for 45deg
    selector4.y = y;
    selector4.MovDir = "W";
    
    break;
case "SE":
    
    // Move AC
    y += MOVEMENT_SPEED*0.71;
    x += MOVEMENT_SPEED*0.71;
    
    // Update selectors
    selector1.image_angle = -45;
    selector1.x = x + 36; // 36 for 45deg
    selector1.y = y - 36;
    selector1.MovDir = "NE";
    
    selector2.image_angle = -90;
    selector2.x = x + 52; // 36 for 45deg
    selector2.y = y;
    selector2.MovDir = "E";
    
    selector3.image_angle = 180;
    selector3.x = x; // 36 for 45deg
    selector3.y = y + 52;
    selector3.MovDir = "S";
    
    selector4.image_angle = 135;
    selector4.x = x - 36; // 36 for 45deg
    selector4.y = y + 36;
    selector4.MovDir = "SW";
    
    break;
case "E":
    
    // Move AC
    x += MOVEMENT_SPEED;
    
    // Update selectors
    selector1.image_angle = 0;
    selector1.x = x; // 36 for 45deg
    selector1.y = y - 52;
    selector1.MovDir = "N";
    
    selector2.image_angle = -45;
    selector2.x = x + 36; // 36 for 45deg
    selector2.y = y - 36;
    selector2.MovDir = "NE";
    
    selector3.image_angle = -135;
    selector3.x = x + 36; // 36 for 45deg
    selector3.y = y + 36;
    selector3.MovDir = "SE";
    
    selector4.image_angle = 180;
    selector4.x = x; // 36 for 45deg
    selector4.y = y + 52;
    selector4.MovDir = "S";
    
    break;
case "NE":
    
    // Move AC
    y -= MOVEMENT_SPEED*0.71;
    x += MOVEMENT_SPEED*0.71;
    
    // Update selectors
    selector1.image_angle = 45;
    selector1.x = x - 36; // 36 for 45deg
    selector1.y = y - 36;
    selector1.MovDir = "NW";
    
    selector2.image_angle = 0;
    selector2.x = x; // 36 for 45deg
    selector2.y = y - 52;
    selector2.MovDir = "N";
    
    selector3.image_angle = -90;
    selector3.x = x + 52; // 36 for 45deg
    selector3.y = y;
    selector3.MovDir = "E";
    
    selector4.image_angle = -135;
    selector4.x = x + 36; // 36 for 45deg
    selector4.y = y + 36;
    selector4.MovDir = "SE";
    
    break;
default:
    
    selector1.image_angle -= 1;
    selector1.x = x - 52; // 36 for 45deg
    selector1.y = y;
    selector1.MovDir = "W";
    
    selector2.image_angle -= 1;
    selector2.x = x - 36; // 36 for 45deg
    selector2.y = y - 36;
    selector2.MovDir = "NW";
    
    selector3.image_angle += 1;
    selector3.x = x + 36; // 36 for 45deg
    selector3.y = y - 36;
    selector3.MovDir = "NE";
    
    selector4.image_angle += 1;
    selector4.x = x + 52; // 36 for 45deg
    selector4.y = y;
    selector4.MovDir = "E";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision handler

isAtRisk = false;
isAtRisk2 = false;

// If out of bounds start reentry timer and reduce score
if(x &lt; -64 || x &gt; room_width + 64 || y &lt; -64 || y &gt; room_height + 64){
    if (alarm[0] == -1){
        alarm[0] = REENTRY_TIMER * room_speed;
        global.CurrentScore -= 80;
        if(global.CurrentScore &lt; 0){
            global.CurrentScore = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_AC">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Verify distance of colliding AC
// If within range, display warning colours

// if colliding
if (other.ACColour == ACColour)
{
    if(x&gt;0 &amp;&amp; x&lt;room_width &amp;&amp; y&gt;0 &amp;&amp; y&lt;room_height)
    {
        isAtRisk = true;
        
        if (point_distance(x, y, other.x, other.y) &lt; WarningRad){
            isAtRisk2 = true;
        }
        
        if (point_distance(x, y, other.x, other.y) &lt; CollisionRad){
            global.CurrentScore -= 3000;
            if(global.CurrentScore &lt; 0){
                global.CurrentScore = 0;
            }
            instance_destroy(other)
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Code to draw required arrows

draw_self();

// Draw gate list
draw_text(x + 44, y + 40, NextGate);

// Draw any required warning colours
if(isAtRisk) {
    draw_sprite(spr_ProxError, 0, x, y);
}
if(isAtRisk2) {
    draw_sprite(spr_ProxError, 1, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
